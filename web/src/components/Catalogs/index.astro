---
let data = {
  img: "catalog1.jpg",
  files: [
    {
      file: "Catalog 2019.1.pdf",
    },
    {
      file: "Catalog 2019.2.pdf",
    },
    {
      file: "Catalog 2020.1.pdf",
    },
    {
      file: "Catalog 2016.4.pdf",
    },
    {
      file: "Catalog 2020.v2.1.pdf",
    },
    {
      file: "UoNA.Catalog.2022.v1.pdf",
    },
    {
      file: "Catalog 2020.v2.pdf",
    },
    {
      file: "Catalog 2017.4r.pdf",
    },
    {
      file: "ESOL Catalog 2017.4r.pdf",
    },
    {
      file: "UoNA.Catalog.2022.v2.pdf",
    },
    {
      file: "UoNA.Catalog.2024.v2.1.pdf",
    },
    {
      file: "UoNA Catalog 2024.v.2.pdf",
    },

    {
      file: "UoNA Catalog 2024.v2.pdf",
    },
    {
      file: "UoNA.Catalog.2023.v1.pdf",
    },
    {
      file: "UoNA.Catalog.2021.v2.pdf",
    },
    {
      file: "UoNA.Catalog.2024.v1.pdf",
    },
    {
      file: "UoNA.Catalog 2021.v1.pdf",
    },
    {
      file: "UoNA.Catalog.2023.v2.pdf",
    },
    {
      file: "Catalog 2017.3r.pdf",
    },
    {
      file: "Catalog 2018.1.pdf",
    },
    {
      file: "Catalog.2025V.1.pdf",
    },
  ],
};

function sortDataByYearAndVersion(data) {
  // Helper: Parse a single filename to extract year and numeric version array
  function parseFileName(fileName) {
    // 1) Extract year (the first 4-digit sequence)
    const yearMatch = fileName.match(/(\d{4})/);
    const year = yearMatch ? parseInt(yearMatch[1], 10) : 0;

    // 2) Extract the portion after the year up to ".pdf"
    //    Example: "Catalog 2020.v2.1.pdf" => after year "2020" => ".v2.1"
    //    We'll remove letters (except digits and periods) to get numeric version parts.
    let versionStr = "";
    const afterYearRegex = new RegExp(`${year}([^]*)\\.pdf`, "i");
    const afterYearMatch = fileName.match(afterYearRegex);
    if (afterYearMatch && afterYearMatch[1]) {
      versionStr = afterYearMatch[1];
    }

    // Remove all non-digit and non-dot characters to simplify numeric version parsing
    // e.g. "v2.1", "4r" => keep digits and dots => "2.1", "4"
    versionStr = versionStr.replace(/[^\d.]/g, "");

    // Trim leading/trailing dots and split into numeric parts
    versionStr = versionStr.replace(/^\.+|\.+$/g, ""); // remove leading/trailing dots
    const versionParts = versionStr
      ? versionStr.split(".").map((part) => parseFloat(part) || 0)
      : [];

    return {
      year,
      versionParts,
    };
  }

  // Custom compare function
  function compareFiles(a, b) {
    const A = parseFileName(a.file);
    const B = parseFileName(b.file);

    // 1) Compare by year (descending)
    if (A.year !== B.year) {
      return B.year - A.year;
    }

    // 2) Compare by version parts (descending)
    //    Compare each corresponding numeric part
    const maxLen = Math.max(A.versionParts.length, B.versionParts.length);
    for (let i = 0; i < maxLen; i++) {
      const aVal = A.versionParts[i] || 0;
      const bVal = B.versionParts[i] || 0;
      if (aVal !== bVal) {
        return bVal - aVal; // descending
      }
    }
    // If versions are effectively the same, keep original order
    return 0;
  }

  // Sort data.files in-place
  data.files.sort(compareFiles);

  return data; // return the updated data object
}

sortDataByYearAndVersion(data);

const mostRecentCalendar = data.files[0].file;
---

<style>
  .catalogcurrent,
  .catalogpast {
    display: flex;
    flex-wrap: wrap;
    max-width: 100%;
    overflow-x: hidden;
    justify-content: center;
  }

  .catalogpast > * {
    width: 300px;
    height: 50px;
    display: flex;
    align-items: center;
    padding: 0 20px;
    text-decoration: none;
    font-family: sans-serif;
    margin: 5px;
    background-color: rgba(0, 0, 0, 1);
    border: 1px solid rgba(0, 0, 0, 1);
    color: #fff;
  }

  .catalogcurrent figure {
    position: relative;
    height: 388px;
    width: 300px;
    margin: 0;
    overflow: hidden;
    background-color: rgba(0, 0, 0, 1);
    border: 1px solid rgba(0, 0, 0, 1);
  }

  .catalogpast > * {
  }

  .catalogcurrent img {
    object-fit: cover;
    width: 100%;
    height: 100%;
    display: block;
  }

  .hidden {
    display: none;
  }

  .catalogcurrent figcaption {
    display: flex;
    position: absolute;
    bottom: 0;
    height: 50px;
    width: 100%;
    background-color: hsla(0, 0%, 0%, 1);
    color: #fff;
    align-items: center;
    justify-content: center;
    font-weight: bold;
  }

  .catalogBtns {
    width: 100%;
    padding: 5px 0;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
  }

  .catalogBtns > * {
    text-transform: uppercase;
    outline: none;
    background: transparent;
    transition: 0.3s;
    border-radius: 0px;
    padding: 10px 20px;
    border: 1px solid rgba(0, 0, 0, 0.5);
    margin: 5px;
    cursor: pointer;
  }

  .catalogBtns button:hover,
  .optionSelected {
    background: rgba(0, 0, 0, 0.5) !important;
    color: #fff !important;
  }
</style>
<div class="catalog">
  <div class="catalogBtns">
    <button
      onclick="showcatalogSection('current')"
      class="optionSelected"
      id="currentBtn">current</button
    >
    <button onclick="showcatalogSection('past')" id="pastBtn">other</button>
  </div>
  <div class="catalogcurrent">
    <a href={`/files/uploads/catalogs/${mostRecentCalendar}`}>
      <figure>
        <img src={`/files/uploads/catalogs/${data.img}`} />
        <figcaption>{mostRecentCalendar}</figcaption>
      </figure>
    </a>
  </div>
  <div class="catalogpast hidden">
    {
      data.files.map((item) => (
        <a href={`/files/uploads/catalogs/${item.file}`}>{item.file}</a>
      ))
    }
  </div>
</div>
<script is:inline>
  var catalogData,
    defaultPath = "/files/uploads/catalogs/",
    catalog = document.querySelector(".catalog"),
    catalogcurrent = catalog.querySelector(".catalogcurrent"),
    catalogpast = catalog.querySelector(".catalogpast"),
    currentBtn = catalog.querySelector("#currentBtn"),
    pastBtn = catalog.querySelector("#pastBtn");

  //displaycatalog();

  function showcatalogSection(t) {
    switch (t) {
      case "current":
        pastBtn.classList.remove("optionSelected");
        currentBtn.classList.add("optionSelected");
        catalogcurrent.classList.remove("hidden");
        catalogpast.classList.add("hidden");
        break;
      case "past":
        pastBtn.classList.add("optionSelected");
        currentBtn.classList.remove("optionSelected");
        catalogcurrent.classList.add("hidden");
        catalogpast.classList.remove("hidden");
        break;
    }
  }
</script>
